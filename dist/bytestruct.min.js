const t=/(le|be)|(byte)|(?:([fsu])(8|16|32|64))|(\d+)|(\w+):|(\s+)|(.)/g,e={8:1,16:2,32:4,64:8,bytes:1},n={f:"Float",s:"Int",u:"Uint"};export function bytes(e,...n){let o,s,r=0,l=[];const i=(t,e)=>{({0:()=>{if(e[1])o="le"===e[1];else if(e[2]){let t={name:"bytes"};null!=s&&(t.label=s,s=void 0),l.push(t)}else if(e[3]){let t=e[3],n=e[4],r={name:t,size:n,littleEndian:o};null!=s&&(r.label=s,s=void 0),l.push(r)}else e[6]?s=e[6]:"*"===e[8]&&(r=1)},1:()=>{if(e[5]){const t=parseInt(e[5]);l.at(-1).repeat=t,r=0}}})[r]()};for(let o=0;o<e.length;o++){const s=e[o],r=s.matchAll(t);for(const t of r)t[7]||i(void 0,t);o<n.length&&i(n[o])}return l}export function sizeOf(t){let n=0;for(const o of t){let t=e[o.size??o.name];o.repeat&&(t*=o.repeat),n+=t}return n}export function writeStructInto(t,o,s,r){let l=r;for(const{name:r,size:i,littleEndian:f,repeat:c,label:u}of o){const o=s[u],a=e[i],b=("s"===r||"u"===r)&&64===i?`Big${n[r]}`:n[r],p=t[`set${b}${i}`].bind(t);if(c)for(let t=0;t<c;t++)p(l,o[t],f),l+=a;else p(l,o,f),l+=a}return r-l}export function readStructFrom(t,o,s){const r={};let l=s;for(const{name:s,size:i,littleEndian:f,repeat:c,label:u}of o){const o=e[i??s];if(!u){l+=o;continue}if("bytes"===s){const e=c??1,n=new Uint8Array(t.buffer);r[u]=n.slice(l,l+e),l+=e}else{const e=("s"===s||"u"===s)&&64===i?`Big${n[s]}`:n[s],a=t[`get${e}${i}`].bind(t);if(c){const t=[];for(let e=0;e<c;e++)t[e]=a(l,f),l+=o;r[u]=t}else r[u]=a(l,f),l+=o}}return r}export function readBytesFrom(t,o,s){let r=s,l=[];for(let s=0;s<o.length;s++){const{name:i,size:f,littleEndian:c,repeat:u}=o[s];if("bytes"===i){const e=u??1,n=new Uint8Array(t.buffer),o=n.slice(r,r+e);l.push.apply(l,o),r+=e;continue}const a=e[f],b=("s"===i||"u"===i)&&64===f?`Big${n[i]}`:n[i],p=t[`get${b}${f}`].bind(t);if(u)for(let t=0;t<u;t++){const t=p(r,c);l.push(t),r+=a}else{const t=p(r,c);l.push(t),r+=a}}return l}export function writeBytesInto(t,o,s,r){let l=r,i=0;for(let r=0;r<o.length;r++){const{name:f,size:c,littleEndian:u,repeat:a}=o[r];if("bytes"===f){const e=a??1,n=s.slice(i,i+e),o=new Uint8Array(t.buffer);o.set(n,l),l+=e,i+=e;continue}const b=e[c],p=("s"===f||"u"===f)&&64===c?`Big${n[f]}`:n[f],y=t[`set${p}${c}`].bind(t);if(a)for(let t=0;t<a;t++)y(l,s[i],u),l+=b,i+=1;else y(l,s[i],u),l+=b,i+=1}return l-r}
